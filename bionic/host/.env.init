# default no debug
DEBUG=no

PATH_SYSROOT=$ANDROID_PRODUCT_OUT/symbols

PATH_LINKERCONFIG=$PATH_SYSROOT/linkerconfig
PATH_LD_CONFIG_TXT=$PATH_LINKERCONFIG/ld.config.txt
PATH_LINKER=$PATH_SYSROOT/system/bin/bootstrap/linker64
PATH_LINKER2=$PATH_SYSROOT/system/bin/linker64
PATH_EXE=$PATH_SYSROOT/data/nativetest64/bionic-unit-tests/bionic-unit-tests
PATH_EXE_STATIC=$PATH_SYSROOT/data/nativetest64/bionic-unit-tests-static/bionic-unit-tests-static
PATH_LIBICU=$PATH_SYSROOT/apex/com.android.i18n/lib64/libicu.so

# LD_LIBRARY_PATH has the highest priority for linker to search for .so files,
# we use it to work-around the ld.config.txt, bcos we use an empty ld.config.txt
# Search paths:
# /apex/com.android.i18n/lib64/ for libicu.so
# /system/lib64/bootstrap for libc.so, libm.so, libdl.so, libdl_android.so
# /system/lib64 for ld-android.so
# /data/nativetest64/bionic-loader-test-libs for those test so files
# readelf -d bionic-unit-tests
# 0x0000000000000001 (NEEDED)             Shared library: [ld-android.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libdl_android.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libdl_preempt_test_1.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libdl_preempt_test_2.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libdl_test_df_1_global.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libtest_elftls_shared_var.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libtest_elftls_tprel.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libc.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libm.so]
# 0x0000000000000001 (NEEDED)             Shared library: [libdl.so]
ENV_LD_LIBRARY_PATH=\
/system/lib64/bootstrap:\
/system/lib64:\
/apex/com.android.i18n/lib64:\
/data/nativetest64/bionic-loader-test-libs

GDB_SOLIB_SEARCH_PATH=\
$PATH_SYSROOT/system/lib64/bootstrap:\
$PATH_SYSROOT/system/lib64:\
$PATH_SYSROOT/apex/com.android.i18n/lib64:\
$PATH_SYSROOT/data/nativetest64/bionic-loader-test-libs

# validate and setup
if [ ! -f $PATH_LINKER ]; then
    echo "$PATH_LINKER does not exist, create it with \'mmm bionic\'."
    exit 1
elif [ ! -f $PATH_LINKER2 ]; then
    echo "$PATH_LINKER2 does not exist, cp it from $PATH_LINKER."
    cp $PATH_LINKER $PATH_LINKER2
fi

if [ ! -f $PATH_EXE ]; then
    echo "$PATH_EXE does not exist, create it with \'mmm bionic\'."
    exit 1
fi

if [ ! -f $PATH_EXE_STATIC ]; then
    echo "$PATH_EXE_STATIC does not exist, create it with \'mmm bionic\'."
    exit 1
fi

if [ ! -f $PATH_LIBICU ]; then
    echo "$PATH_LIBICU does not exist, create it with \'mmm external/icu\'."
    exit 1
fi

if [ ! -d $PATH_LINKERCONFIG ]; then
    echo "$PATH_LINKERCONFIG does not exist, create it."
    mkdir -p $PATH_LINKERCONFIG
fi

if [ ! -f $PATH_LD_CONFIG_TXT ]; then
    echo "$PATH_LD_CONFIG_TXT does not exist, create it."
    touch $PATH_LD_CONFIG_TXT
fi

GTEST_FILTER=$1